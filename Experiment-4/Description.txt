LIVE CHARACTER COUNTER FOR TEXTAREA

LAYOUT STRUCTURE & FEATURES
1. SECTION: Container

Purpose: Acts as the central wrapper holding all interface elements for the character counter tool.
Elements:

⦁	<h3> heading displaying the title: “Live Character Counter”.

⦁	<textarea id="textInput"> for typing user input.

⦁	<div class="counter">Characters: <span id="charCount">0</span></div> to display the live count.

Positioning & Layout:

⦁	Organized vertically within the container.

⦁	Styled with padding and border for clear visibility.

2. INTERACTIVITY (JavaScript)

Purpose: Enables real-time character tracking.
Logic:

⦁	Uses document.getElementById to select <textarea> and <span>.

⦁	Attaches an input event listener to the textarea.

⦁	Updates the character count dynamically with:

⦁	counter.textContent = textarea.value.length;


Behavior:

⦁	Counter updates instantly when typing, deleting, or modifying text.

⦁	Works for letters, spaces, numbers, and symbols alike.

3. DESIGN & STYLING (CSS)

Body:

⦁	padding: 20px ensures spacing from browser edges.

Container:

⦁	border: 1px solid black with padding: 10px for clarity.

⦁	Fixed width (500px) for consistent appearance.

Textarea:

⦁	Full-width (100%), height of 100px.

⦁	Comfortable text size (14px) with internal padding (8px).

⦁	box-sizing: border-box ensures accurate sizing with padding.

Counter:

⦁	Styled with bold font to highlight character count.

⦁	margin-top: 5px separates it from the textarea.

CODE ORGANIZATION OVERVIEW

⦁	HTML: Provides structure (heading, textarea, counter).

⦁	CSS: Adds visual styling for readability and neat layout.

⦁	JavaScript: Powers dynamic updates with real-time event handling.

⦁	Separation of concerns ensures maintainability and clarity.

HTML STRUCTURE RECAP

⦁	Uses semantic tags (<h3>, <textarea>, <div>).

⦁	Links external stylesheet (style.css) and script (script.js).

⦁	Organized for modular design and scalability.

LEARNING OUTCOMES

⦁	Understand how to handle real-time input using JavaScript events.

⦁	Learn DOM selection and manipulation (getElementById, .textContent).

⦁	Practice CSS layout and styling for interactive form components.

⦁	Experience separating structure (HTML), styling (CSS), and behavior (JS).

⦁	Build a foundation for more advanced input-validation and user-feedback systems.